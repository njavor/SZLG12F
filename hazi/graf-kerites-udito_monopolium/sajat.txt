using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace graf_kerites_udito_monopolium
{
    internal class Program
    {
        class Bergengoc
        {
            public bool italpreferencia; //Calo (false) vagy Pipse (true)
            public List<int> baratok;
            public List<int> baratok_ind1;

            public Bergengoc(bool ital)
            {
                italpreferencia = ital;
                baratok = new List<int>();
                baratok_ind1 = new List<int>();
            }

            public void Diagnosztika()
            {
                Console.WriteLine("\n\n-----------------------\nDiagnosztika - bergeng\n- - - - - - - - - - - -\n");
                for (int i = 0; i < baratok.Count(); i++)
                    Console.Write($"[{i} - ital:{italpreferencia}]: [{String.Join(", ", baratok[i])}]\n");
                Console.WriteLine("\n-----------------------\n");
            }

            public void Italvaltas() => italpreferencia = !italpreferencia;
        }
        class Teszteset
        {
            List<Bergengoc> bergengoclista;
            int C, P;

            public Teszteset(int N, int M)
            {
                bergengoclista = new List<Bergengoc>();
                (C, P) = (0, 0);

                string[] sor = Console.ReadLine().Split(' ');
                for (int i = 0; i < N; i++)
                {
                    bergengoclista.Add(new Bergengoc(int.Parse(sor[i]) == 1));
                    if (int.Parse(sor[i]) == 1) P++;
                    else C++;
                }

                for (int j = 0; j < M; j++)
                {
                    sor = Console.ReadLine().Split(' ');
                    //kölcsönös a kapcsolat
                    bergengoclista[int.Parse(sor[0]) - 1].baratok.Add(int.Parse(sor[1]) - 1);
                    bergengoclista[int.Parse(sor[1]) - 1].baratok.Add(int.Parse(sor[0]) - 1);

                    bergengoclista[int.Parse(sor[0]) - 1].baratok_ind1.Add(int.Parse(sor[1]));
                    bergengoclista[int.Parse(sor[1]) - 1].baratok_ind1.Add(int.Parse(sor[0]));
                }
            }

            public void Diagnosztika_ind1()
            {
                Console.WriteLine("\n-----------------------\nDiagnosztika\n- - - - - - - - - - - -\n");
                Console.WriteLine($"Calo: {C}\nPipse: {P}");
                for (int i = 0; i < bergengoclista.Count(); i++)
                    Console.Write($"[{i + 1} - ital:{(bergengoclista[i].italpreferencia == false ? "Calo" : "Pips")}]: [{String.Join(", ", bergengoclista[i].baratok_ind1)}]\n");
                Console.WriteLine("\n-----------------------\n");
            }
            public void Diagnosztika_jelenlegi()
            {
                Console.WriteLine("\n-----------------------\nDiagnosztika\n- - - - - - - - - - - -\n");
                Console.WriteLine($"Calo: {C}\nPipse: {P}");
                for (int i = 0; i < bergengoclista.Count(); i++)
                    Console.Write($"[{i + 1} - ital:{(bergengoclista[i].italpreferencia == false ? "Calo" : "Pips")}]: [{String.Join(", ", bergengoclista[i].baratok)}]\n");
                Console.WriteLine("\n-----------------------\n");
            }


            public int Ajandekkampany()
            {
                int minHet = 0;
                
                while(!Siker())
                {
                    Csomagkuldes();
                    CvP = !CvP;
                    minHet++;
                }

                return minHet;
            }
            private (List<Bergengoc>, List<Bergengoc>) Darabszam()
            {
                List<Bergengoc> calo = new List<Bergengoc>();
                List<Bergengoc> pipse = new List<Bergengoc>();
            }
            private bool Siker()
            {
                bool res = true;

                bool elsopref = bergengoclista[0].italpreferencia;
                foreach (var bergengoc in bergengoclista)
                    if (bergengoc.italpreferencia != elsopref)
                        res = false;

                return res;
            }

            public void Csomagkuldes(int kinek)
            {
                int feher = 0, szurke = 1, fekete = 2;
                int[] szin = new int[bergengoclista.Count()];

                Stack<int> tennivalok = new Stack<int>();
                tennivalok.Push(kinek);
                szin[kinek] = szurke;

                int feldolgozando;
                while (tennivalok.Count != 0)
                {
                    feldolgozando = tennivalok.Pop();
                    bergengoclista[feldolgozando].italpreferencia = !bergengoclista[feldolgozando].italpreferencia;
                    szin[feldolgozando] = fekete;

                    foreach (int barat in bergengoclista[feldolgozando].baratok)
                        if (szin[barat] == feher && bergengoclista[barat].italpreferencia == bergengoclista[feldolgozando].italpreferencia)
                        {
                            tennivalok.Push(barat);
                            szin[barat] = szurke;
                        }
                }
            }
        }
        static void Main(string[] args)
        {
            int T = int.Parse(Console.ReadLine());
            List<Teszteset> tesztesetek = new List<Teszteset>();

            string[] sor;
            int N, M;
            for (int i = 0; i < T; i++)
            {
                sor = Console.ReadLine().Split(' ');
                N = int.Parse(sor[0]);
                M = int.Parse(sor[1]);

                tesztesetek.Add(new Teszteset(N, M));
            }




            /* start diagnosztika
            Console.WriteLine("\n\nTESZTEK DIAGNOSZTIKÁJA");
            foreach (var teszt in tesztesetek)
                teszt.Diagnosztika_ind1();
             */

            List<int> results = new List<int>();
            foreach (var teszteset in tesztesetek)
                results.Add(teszteset.Ajandekkampany());

            foreach (var res in results)
                Console.WriteLine(res);
            
        }
    }
}

/*
* Példa bemenet
2
4 3
0 1 0 0
1 2
2 3
2 4
5 4
0 1 1 0 1
1 2
2 3
3 4
4 5

2
4 3
0 1 0 0
0 1
1 2
1 3
5 4
0 1 1 0 1
0 1
1 2
2 3
3 4

 * Példa kimenet
1
2
*/